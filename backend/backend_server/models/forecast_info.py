# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model_ import Model
from backend_server.models.forecast_info_humidity import ForecastInfoHumidity
from backend_server.models.forecast_info_pressure import ForecastInfoPressure
from backend_server.models.forecast_info_temperature import ForecastInfoTemperature
from backend_server import util


class ForecastInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, overall: List[str]=None, temperature: ForecastInfoTemperature=None, humidity: ForecastInfoHumidity=None, pressure: ForecastInfoPressure=None):  # noqa: E501
        """ForecastInfo - a model defined in Swagger

        :param overall: The overall of this ForecastInfo.  # noqa: E501
        :type overall: List[str]
        :param temperature: The temperature of this ForecastInfo.  # noqa: E501
        :type temperature: ForecastInfoTemperature
        :param humidity: The humidity of this ForecastInfo.  # noqa: E501
        :type humidity: ForecastInfoHumidity
        :param pressure: The pressure of this ForecastInfo.  # noqa: E501
        :type pressure: ForecastInfoPressure
        """
        self.swagger_types = {
            'overall': List[str],
            'temperature': ForecastInfoTemperature,
            'humidity': ForecastInfoHumidity,
            'pressure': ForecastInfoPressure
        }

        self.attribute_map = {
            'overall': 'overall',
            'temperature': 'temperature',
            'humidity': 'humidity',
            'pressure': 'pressure'
        }

        self._overall = overall
        self._temperature = temperature
        self._humidity = humidity
        self._pressure = pressure

    @classmethod
    def from_dict(cls, dikt) -> 'ForecastInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ForecastInfo of this ForecastInfo.  # noqa: E501
        :rtype: ForecastInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def overall(self) -> List[str]:
        """Gets the overall of this ForecastInfo.

        Hourly overall forecast condition icon Id  # noqa: E501

        :return: The overall of this ForecastInfo.
        :rtype: List[str]
        """
        return self._overall

    @overall.setter
    def overall(self, overall: List[str]):
        """Sets the overall of this ForecastInfo.

        Hourly overall forecast condition icon Id  # noqa: E501

        :param overall: The overall of this ForecastInfo.
        :type overall: List[str]
        """

        self._overall = overall

    @property
    def temperature(self) -> ForecastInfoTemperature:
        """Gets the temperature of this ForecastInfo.


        :return: The temperature of this ForecastInfo.
        :rtype: ForecastInfoTemperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: ForecastInfoTemperature):
        """Sets the temperature of this ForecastInfo.


        :param temperature: The temperature of this ForecastInfo.
        :type temperature: ForecastInfoTemperature
        """

        self._temperature = temperature

    @property
    def humidity(self) -> ForecastInfoHumidity:
        """Gets the humidity of this ForecastInfo.


        :return: The humidity of this ForecastInfo.
        :rtype: ForecastInfoHumidity
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: ForecastInfoHumidity):
        """Sets the humidity of this ForecastInfo.


        :param humidity: The humidity of this ForecastInfo.
        :type humidity: ForecastInfoHumidity
        """

        self._humidity = humidity

    @property
    def pressure(self) -> ForecastInfoPressure:
        """Gets the pressure of this ForecastInfo.


        :return: The pressure of this ForecastInfo.
        :rtype: ForecastInfoPressure
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure: ForecastInfoPressure):
        """Sets the pressure of this ForecastInfo.


        :param pressure: The pressure of this ForecastInfo.
        :type pressure: ForecastInfoPressure
        """

        self._pressure = pressure
