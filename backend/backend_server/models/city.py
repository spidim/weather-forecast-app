# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model_ import Model
from backend_server.models.city_coords import CityCoords
from backend_server.models.forecast_info import ForecastInfo
from backend_server import util


class City(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, coords: CityCoords=None, name: str=None, curr_weather_icon_id: str=None, forecast_info: ForecastInfo=None):  # noqa: E501
        """City - a model defined in Swagger

        :param id: The id of this City.  # noqa: E501
        :type id: int
        :param coords: The coords of this City.  # noqa: E501
        :type coords: CityCoords
        :param name: The name of this City.  # noqa: E501
        :type name: str
        :param curr_weather_icon_id: The curr_weather_icon_id of this City.  # noqa: E501
        :type curr_weather_icon_id: str
        :param forecast_info: The forecast_info of this City.  # noqa: E501
        :type forecast_info: ForecastInfo
        """
        self.swagger_types = {
            'id': int,
            'coords': CityCoords,
            'name': str,
            'curr_weather_icon_id': str,
            'forecast_info': ForecastInfo
        }

        self.attribute_map = {
            'id': 'id',
            'coords': 'coords',
            'name': 'name',
            'curr_weather_icon_id': 'currWeatherIconId',
            'forecast_info': 'forecastInfo'
        }

        self._id = id
        self._coords = coords
        self._name = name
        self._curr_weather_icon_id = curr_weather_icon_id
        self._forecast_info = forecast_info

    @classmethod
    def from_dict(cls, dikt) -> 'City':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The City of this City.  # noqa: E501
        :rtype: City
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this City.


        :return: The id of this City.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this City.


        :param id: The id of this City.
        :type id: int
        """

        self._id = id

    @property
    def coords(self) -> CityCoords:
        """Gets the coords of this City.


        :return: The coords of this City.
        :rtype: CityCoords
        """
        return self._coords

    @coords.setter
    def coords(self, coords: CityCoords):
        """Sets the coords of this City.


        :param coords: The coords of this City.
        :type coords: CityCoords
        """
        if coords is None:
            raise ValueError("Invalid value for `coords`, must not be `None`")  # noqa: E501

        self._coords = coords

    @property
    def name(self) -> str:
        """Gets the name of this City.


        :return: The name of this City.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this City.


        :param name: The name of this City.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def curr_weather_icon_id(self) -> str:
        """Gets the curr_weather_icon_id of this City.


        :return: The curr_weather_icon_id of this City.
        :rtype: str
        """
        return self._curr_weather_icon_id

    @curr_weather_icon_id.setter
    def curr_weather_icon_id(self, curr_weather_icon_id: str):
        """Sets the curr_weather_icon_id of this City.


        :param curr_weather_icon_id: The curr_weather_icon_id of this City.
        :type curr_weather_icon_id: str
        """
        if curr_weather_icon_id is None:
            raise ValueError("Invalid value for `curr_weather_icon_id`, must not be `None`")  # noqa: E501

        self._curr_weather_icon_id = curr_weather_icon_id

    @property
    def forecast_info(self) -> ForecastInfo:
        """Gets the forecast_info of this City.


        :return: The forecast_info of this City.
        :rtype: ForecastInfo
        """
        return self._forecast_info

    @forecast_info.setter
    def forecast_info(self, forecast_info: ForecastInfo):
        """Sets the forecast_info of this City.


        :param forecast_info: The forecast_info of this City.
        :type forecast_info: ForecastInfo
        """

        self._forecast_info = forecast_info
